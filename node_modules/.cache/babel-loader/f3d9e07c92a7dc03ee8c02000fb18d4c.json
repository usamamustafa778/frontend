{"ast":null,"code":"var _jsxFileName = \"/Users/usamabhatti/Documents/amazona/frontend/src/screens/SupportScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport socketIOClient from 'socket.io-client';\nimport MessageBox from '../components/MessageBox';\nimport { Store } from '../Store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconst ENDPOINT = window.location.host.indexOf('localhost') >= 0 ? 'http://127.0.0.1:5000' : window.location.host;\nexport default function SupportScreen() {\n  _s();\n\n  const [selectedUser, setSelectedUser] = useState({});\n  const [socket, setSocket] = useState(null);\n  const uiMessagesRef = useRef(null);\n  const [messageBody, setMessageBody] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const {\n    state\n  } = useContext(Store);\n  const {\n    userInfo\n  } = state;\n  useEffect(() => {\n    if (uiMessagesRef.current) {\n      uiMessagesRef.current.scrollBy({\n        top: uiMessagesRef.current.clientHeight,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n\n    if (!socket) {\n      const sk = socketIOClient(ENDPOINT);\n      setSocket(sk);\n      sk.emit('onLogin', {\n        _id: userInfo._id,\n        name: userInfo.name,\n        isAdmin: userInfo.isAdmin\n      });\n      sk.on('message', data => {\n        if (allSelectedUser._id === data._id) {\n          allMessages = [...allMessages, data];\n        } else {\n          const existUser = allUsers.find(user => user._id === data._id);\n\n          if (existUser) {\n            allUsers = allUsers.map(user => user._id === existUser._id ? { ...user,\n              unread: true\n            } : user);\n            setUsers(allUsers);\n          }\n        }\n\n        setMessages(allMessages);\n      });\n      sk.on('updateUser', updatedUser => {\n        const existUser = allUsers.find(user => user._id === updatedUser._id);\n\n        if (existUser) {\n          allUsers = allUsers.map(user => user._id === existUser._id ? updatedUser : user);\n          setUsers(allUsers);\n        } else {\n          allUsers = [...allUsers, updatedUser];\n          setUsers(allUsers);\n        }\n      });\n      sk.on('listUsers', updatedUsers => {\n        allUsers = updatedUsers;\n        setUsers(allUsers);\n      });\n      sk.on('selectUser', user => {\n        allMessages = user.messages;\n        setMessages(allMessages);\n      });\n    }\n  }, [messages, socket, users, userInfo._id, userInfo.isAdmin, userInfo.name]);\n\n  const selectUser = user => {\n    allSelectedUser = user;\n    setSelectedUser(allSelectedUser);\n    const existUser = allUsers.find(x => x._id === user._id);\n\n    if (existUser) {\n      allUsers = allUsers.map(x => x._id === existUser._id ? { ...x,\n        unread: false\n      } : x);\n      setUsers(allUsers);\n    }\n\n    socket.emit('onUserSelected', user);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (!messageBody.trim()) {\n      alert('Error. Please type message.');\n    } else {\n      allMessages = [...allMessages, {\n        body: messageBody,\n        name: userInfo.name\n      }];\n      setMessages(allMessages);\n      setMessageBody('');\n      setTimeout(() => {\n        socket.emit('onMessage', {\n          body: messageBody,\n          name: userInfo.name,\n          isAdmin: userInfo.isAdmin,\n          _id: selectedUser._id\n        });\n      }, 1000);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row top full-container\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"support-users\",\n          children: [users.filter(x => x._id !== userInfo._id).length === 0 && /*#__PURE__*/_jsxDEV(MessageBox, {\n            children: \"No Online User Found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: users.filter(x => x._id !== userInfo._id).map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: user._id === selectedUser._id ? '  selected' : ' ',\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"block\",\n                type: \"button\",\n                onClick: () => selectUser(user),\n                children: user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: user.unread ? 'unread' : user.online ? 'online' : 'offline'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 41\n              }, this)]\n            }, user._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"support-messages\",\n          children: !selectedUser._id ? /*#__PURE__*/_jsxDEV(MessageBox, {\n            children: \"Select a user to start chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Chat with \", selectedUser.name, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              ref: uiMessagesRef,\n              children: [messages.length === 0 && /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"No message.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 63\n              }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: `${msg.name}: `\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 45\n                }, this), \" \", msg.body]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 41\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: submitHandler,\n                className: \"row\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  value: messageBody,\n                  onChange: e => setMessageBody(e.target.value),\n                  type: \"text\",\n                  placeholder: \"type message\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"submit\",\n                  children: \"Send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SupportScreen, \"WrNEkzEY8X2xS/4bf9jKJN8+NR0=\");\n\n_c = SupportScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SupportScreen\");","map":{"version":3,"names":["React","useContext","useEffect","useRef","useState","Col","Row","socketIOClient","MessageBox","Store","allUsers","allMessages","allSelectedUser","ENDPOINT","window","location","host","indexOf","SupportScreen","selectedUser","setSelectedUser","socket","setSocket","uiMessagesRef","messageBody","setMessageBody","messages","setMessages","users","setUsers","state","userInfo","current","scrollBy","top","clientHeight","left","behavior","sk","emit","_id","name","isAdmin","on","data","existUser","find","user","map","unread","updatedUser","updatedUsers","selectUser","x","submitHandler","e","preventDefault","trim","alert","body","setTimeout","filter","length","online","msg","index","target","value"],"sources":["/Users/usamabhatti/Documents/amazona/frontend/src/screens/SupportScreen.js"],"sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport socketIOClient from 'socket.io-client';\nimport MessageBox from '../components/MessageBox';\nimport { Store } from '../Store';\n\nlet allUsers = [];\nlet allMessages = [];\nlet allSelectedUser = {};\nconst ENDPOINT =\n    window.location.host.indexOf('localhost') >= 0\n        ? 'http://127.0.0.1:5000'\n        : window.location.host;\n\nexport default function SupportScreen() {\n    const [selectedUser, setSelectedUser] = useState({});\n    const [socket, setSocket] = useState(null);\n    const uiMessagesRef = useRef(null);\n    const [messageBody, setMessageBody] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [users, setUsers] = useState([]);\n    const { state } = useContext(Store);\n    const { userInfo } = state;\n\n    useEffect(() => {\n        if (uiMessagesRef.current) {\n            uiMessagesRef.current.scrollBy({\n                top: uiMessagesRef.current.clientHeight,\n                left: 0,\n                behavior: 'smooth',\n            });\n        }\n\n        if (!socket) {\n            const sk = socketIOClient(ENDPOINT);\n            setSocket(sk);\n            sk.emit('onLogin', {\n                _id: userInfo._id,\n                name: userInfo.name,\n                isAdmin: userInfo.isAdmin,\n            });\n\n            sk.on('message', (data) => {\n                if (allSelectedUser._id === data._id) {\n                    allMessages = [...allMessages, data];\n                } else {\n                    const existUser = allUsers.find((user) => user._id === data._id);\n                    if (existUser) {\n                        allUsers = allUsers.map((user) =>\n                            user._id === existUser._id ? { ...user, unread: true } : user\n                        );\n                        setUsers(allUsers);\n                    }\n                }\n                setMessages(allMessages);\n            });\n\n            sk.on('updateUser', (updatedUser) => {\n                const existUser = allUsers.find((user) => user._id === updatedUser._id);\n                if (existUser) {\n                    allUsers = allUsers.map((user) =>\n                        user._id === existUser._id ? updatedUser : user\n                    );\n                    setUsers(allUsers);\n                } else {\n                    allUsers = [...allUsers, updatedUser];\n                    setUsers(allUsers);\n                }\n            });\n\n            sk.on('listUsers', (updatedUsers) => {\n                allUsers = updatedUsers;\n                setUsers(allUsers);\n            });\n\n            sk.on('selectUser', (user) => {\n                allMessages = user.messages;\n                setMessages(allMessages);\n            });\n        }\n    }, [messages, socket, users, userInfo._id, userInfo.isAdmin, userInfo.name]);\n\n    const selectUser = (user) => {\n        allSelectedUser = user;\n        setSelectedUser(allSelectedUser);\n        const existUser = allUsers.find((x) => x._id === user._id);\n        if (existUser) {\n            allUsers = allUsers.map((x) =>\n                x._id === existUser._id ? { ...x, unread: false } : x\n            );\n            setUsers(allUsers);\n        }\n        socket.emit('onUserSelected', user);\n    };\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (!messageBody.trim()) {\n            alert('Error. Please type message.');\n        } else {\n            allMessages = [\n                ...allMessages,\n                { body: messageBody, name: userInfo.name },\n            ];\n            setMessages(allMessages);\n            setMessageBody('');\n            setTimeout(() => {\n                socket.emit('onMessage', {\n                    body: messageBody,\n                    name: userInfo.name,\n                    isAdmin: userInfo.isAdmin,\n                    _id: selectedUser._id,\n                });\n            }, 1000);\n        }\n    };\n\n    return (\n        <Row>\n            <div className=\"row top full-container\">\n                <Col md={4}>\n                    <div className=\"support-users\">\n                        {users.filter((x) => x._id !== userInfo._id).length === 0 && (\n                            <MessageBox>No Online User Found</MessageBox>\n                        )}\n                        <ul>\n                            {users\n                                .filter((x) => x._id !== userInfo._id)\n                                .map((user) => (\n                                    <li\n                                        key={user._id}\n                                        className={user._id === selectedUser._id ? '  selected' : ' '}\n                                    >\n                                        <button\n                                            className=\"block\"\n                                            type=\"button\"\n                                            onClick={() => selectUser(user)}\n                                        >\n                                            {user.name}\n                                        </button>\n                                        <span\n                                            className={\n                                                user.unread ? 'unread' : user.online ? 'online' : 'offline'\n                                            }\n                                        />\n                                    </li>\n                                ))}\n                        </ul>\n                    </div>\n                </Col>\n                <Col md={8}>\n                    <div className=\"support-messages\">\n                        {!selectedUser._id ? (\n                            <MessageBox>Select a user to start chat</MessageBox>\n                        ) : (\n                            <div>\n                                <div className=\"row\">\n                                    <strong>Chat with {selectedUser.name} </strong>\n                                </div>\n                                <ul ref={uiMessagesRef}>\n                                    {messages.length === 0 && <li>No message.</li>}\n                                    {messages.map((msg, index) => (\n                                        <li key={index}>\n                                            <strong>{`${msg.name}: `}</strong> {msg.body}\n                                        </li>\n                                    ))}\n                                </ul>\n                                <div>\n                                    <form onSubmit={submitHandler} className=\"row\">\n                                        <input\n                                            value={messageBody}\n                                            onChange={(e) => setMessageBody(e.target.value)}\n                                            type=\"text\"\n                                            placeholder=\"type message\"\n                                        />\n                                        <button type=\"submit\">Send</button>\n                                    </form>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </Col>\n            </div>\n        </Row>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}